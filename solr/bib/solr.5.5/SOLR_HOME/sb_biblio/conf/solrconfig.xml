<?xml version="1.0" encoding="UTF-8" ?>

<config>

    <!-- Anpassungen fuer swissbib: GH 2015-08-16 -->
    <!-- die ausfuehrlichen Kommentare zu einzelnen items in der Original
    solrconfig.xml Datei wurden zwecks besserer Leserlichkeit entfernt
    Sie können jederzeit mit einem Download der files nachgesehen werden -->

    <luceneMatchVersion>5.5.1</luceneMatchVersion>

    <!-- lucene analysis jars nicht in standard techconfig -->
    <lib dir="${solr.install.dir:}/contrib/analysis-extras/lucene-libs" regex=".*\.jar" />
    <lib dir="${solr.install.dir:}/contrib/analysis-extras/lib" regex=".*\.jar" />
    <lib dir="${solr.install.dir:}/dist/" regex="solr-analysis-extras-\d.*\.jar" />


    <lib dir="${solr.install.dir:}/contrib/extraction/lib" regex=".*\.jar" />
    <lib dir="${solr.install.dir:}/dist/" regex="solr-cell-\d.*\.jar" />

    <lib dir="${solr.install.dir:}/contrib/clustering/lib/" regex=".*\.jar" />
    <lib dir="${solr.install.dir:}/dist/" regex="solr-clustering-\d.*\.jar" />

    <lib dir="${solr.install.dir:}/contrib/langid/lib/" regex=".*\.jar" />
    <lib dir="${solr.install.dir:}/dist/" regex="solr-langid-\d.*\.jar" />

    <lib dir="${solr.install.dir:}/contrib/velocity/lib" regex=".*\.jar" />
    <lib dir="${solr.install.dir:}/dist/" regex="solr-velocity-\d.*\.jar" />

    <!-- <lib dir="${solr.install.dir:}/dist/" regex="solr-core-\d.*\.jar" /> -->




    <dataDir>${solr.data.dir:}</dataDir>


    <directoryFactory name="DirectoryFactory"
                    class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}"/>

    <codecFactory class="solr.SchemaCodecFactory"/>

    <schemaFactory class="ClassicIndexSchemaFactory"/>

    <indexConfig>

        <lockType>${solr.lock.type:native}</lockType>
        <infoStream>true</infoStream>

    </indexConfig>


    <jmx />

    <updateHandler class="solr.DirectUpdateHandler2">

    <updateLog>
      <str name="dir">${solr.ulog.dir:}</str>
      <int name="numVersionBuckets">${solr.ulog.numVersionBuckets:65536}</int>
    </updateLog>
 
     <autoCommit>
       <maxTime>${solr.autoCommit.maxTime:15000}</maxTime>
       <!-- compare SiA p.150
       on the traditional Master side I think false should be ok because we don't search on the index
       but slaves should get a new searchers after commits were done
       -->
       <openSearcher>false</openSearcher> 
     </autoCommit>

     <autoSoftCommit>
       <maxTime>${solr.autoSoftCommit.maxTime:-1}</maxTime> 
     </autoSoftCommit>

    <!-- Update Related Event Listeners
         
         Various IndexWriter related events can trigger Listeners to
         take actions.

         postCommit - fired after every commit or optimize command
         postOptimize - fired after every optimize command
      -->
    <!-- The RunExecutableListener executes an external command from a
         hook such as postCommit or postOptimize.
         
         exe - the name of the executable to run
         dir - dir to use as the current working directory. (default=".")
         wait - the calling thread waits until the executable returns. 
                (default="true")
         args - the arguments to pass to the program.  (default is none)
         env - environment variables to set.  (default is none)
      -->
    <!-- This example shows how RunExecutableListener could be used
         with the script based replication...
         http://wiki.apache.org/solr/CollectionDistribution
      -->
    <!--
       <listener event="postCommit" class="solr.RunExecutableListener">
         <str name="exe">solr/bin/snapshooter</str>
         <str name="dir">.</str>
         <bool name="wait">true</bool>
         <arr name="args"> <str>arg1</str> <str>arg2</str> </arr>
         <arr name="env"> <str>MYVAR=val1</str> </arr>
       </listener>
      -->

  </updateHandler>
  
  <!--
  <indexReaderFactory name="IndexReaderFactory" class="package.class">
    <str name="someArg">Some Value</str>
  </indexReaderFactory >
  -->

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       Query section - these settings control query time things like caches
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <query>

    <maxBooleanClauses>1024</maxBooleanClauses>
    <slowQueryThresholdMillis>-1</slowQueryThresholdMillis>
    <filterCache class="solr.FastLRUCache"
                 size="512"
                 initialSize="512"
                 autowarmCount="0"/>

    <queryResultCache class="solr.LRUCache"
                     size="512"
                     initialSize="512"
                     autowarmCount="0"/>
   
    <documentCache class="solr.LRUCache"
                   size="512"
                   initialSize="512"
                   autowarmCount="0"/>
    
    <!-- custom cache currently used by block join --> 
    <cache name="perSegFilter"
      class="solr.search.LRUCache"
      size="10"
      initialSize="0"
      autowarmCount="10"
      regenerator="solr.NoOpRegenerator" />

    <enableLazyFieldLoading>true</enableLazyFieldLoading>

   <queryResultWindowSize>20</queryResultWindowSize>

   <queryResultMaxDocsCached>200</queryResultMaxDocsCached>

    <listener event="newSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
      </arr>
    </listener>
    <listener event="firstSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
      </arr>
    </listener>

    <useColdSearcher>false</useColdSearcher>

    <maxWarmingSearchers>2</maxWarmingSearchers>

  </query>


    <requestDispatcher handleSelect="true" >

    <requestParsers enableRemoteStreaming="true"
                    multipartUploadLimitInKB="2048000"
                    formdataUploadLimitInKB="2048"
                    addHttpRequestToContext="false"/>

    <httpCaching never304="true" />
    </requestDispatcher>


    <!--
     Mein Kommentar in 4.10.2 - ist das so noch gültig?
    Wir erleben hier einen verzweifelten Versuch von SOLR REST kompatibel zu werden und gleichzeitig den Parameter Balast
    von Jahren noch durchzuziehen
    - wie bei RequestDispatcher bereits erwähnt ist das eigentlich deprecated und nur aus Kompatibilitätsgründen vorhandene Attribut
    handleSelect=true erforderlich um einen /select RequestHandler mit einem qt Parameter überstehen zu können.
    So die Doku. Das funktioniert aber nicht. Entfernt man den standardmässig ausgelieferten /select RequestHandler nicht, wird ein qt Parameter
    nicht berücksichtigt...
    Das von SOLR anvisierte Ziel, eindeutige Ressourcen wie /edismax ansteuern zu können wird in der Doku gleichzeitig in Frage gestellt, da man von Namen
    wie /edismax abrät..
    VuFind verlässt sich aber darauf, alle Abfragen mit /select ansteuern zu können. Zum Beispiel für die Vollansicht darf jedoch kein edismax Parser verwednet werden
    (es werden nicht die erforderlichen parameter gesetzt z.B. qf)
    "Lösung" des ganzen Schrott:
    - setze handleSelect="true
    - lösche den requestHandler name=/select
    - definiere den requestHandler name="standard" (sonst funktioniert VuFind nicht mehr...)
    "
    -->
    <requestHandler name="standard" class="solr.StandardRequestHandler" default="true"/>

    <requestHandler name="dismax" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="defType">dismax</str>
            <!-- str name="fl">a*,b*,c*,d*,e*,first_indexed,format,fullrecord,g*,h*,i*,l*,o*,p*,r*,s*,t*,u*,*_date*,*_isn*,*_str*,*_txt*</str -->
            <str name="echoParams">explicit</str>
            <!--  <str name="spellcheck.extendedResults">true</str>
                    <str name="spellcheck.onlyMorePopular">true</str>
                    <str name="spellcheck.count">20</str> -->

            <!-- Spellchecking -->

            <str name="spellcheck.extendedResults">true</str>
            <str name="spellcheck.count">10</str>
            <str name="spellcheck.alternativeTermCount">5</str>
            <str name="spellcheck.maxResultsForSuggest">5</str>
            <str name="spellcheck.collate">true</str>
            <str name="spellcheck.collateExtendedResults">true</str>
            <str name="spellcheck.maxCollationTries">10</str>
            <str name="spellcheck.maxCollations">5</str>

        </lst>
        <arr name="last-components">
            <str>spellcheck</str>
        </arr>
    </requestHandler>


    <requestHandler name="edismax" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="defType">edismax</str>
            <!-- str name="fl">a*,b*,c*,d*,e*,first_indexed,format,fullrecord,g*,h*,i*,l*,o*,p*,r*,s*,t*,u*,*_date*,*_isn*,*_str*,*_txt*</str -->
            <str name="echoParams">explicit</str>
            <!--  <str name="spellcheck.extendedResults">true</str>
                    <str name="spellcheck.onlyMorePopular">true</str>
                    <str name="spellcheck.count">20</str> -->

            <!-- Spellchecking -->



            <str name="spellcheck.extendedResults">true</str>
            <str name="spellcheck.count">10</str>
            <str name="spellcheck.alternativeTermCount">5</str>
            <str name="spellcheck.maxResultsForSuggest">5</str>
            <str name="spellcheck.collate">true</str>
            <str name="spellcheck.collateExtendedResults">true</str>
            <str name="spellcheck.maxCollationTries">10</str>
            <str name="spellcheck.maxCollations">8</str>
            <str name="spellcheck.accuracy">0.5</str>

        </lst>
        <arr name="last-components">    
            <str>spellcheck</str>
        </arr>
    </requestHandler>

    <requestHandler name="morelikethis" class="solr.MoreLikeThisHandler">
        <lst name="defaults">
            <str name="mlt.fl">title, title_short, author, topic, publishDate,classif_rvk,classif_udc,classif_ddc</str>
            <str name="mlt.qf">
                title^75
                title_short^100
                topic^500
                language^30
                author^75
                publishDate
                classif_rvk^100
                classif_udc^100
                classif_ddc^100
            </str>
            <int name="mlt.mintf">1</int>
            <int name="mlt.mindf">1</int>
            <str name="mlt.boost">true</str>
            <int name="mlt.count">5</int>
            <int name="rows">5</int>
        </lst>
    </requestHandler>




  <!-- A request handler that returns indented JSON by default -->
  <requestHandler name="/query" class="solr.SearchHandler">
     <lst name="defaults">
       <str name="echoParams">explicit</str>
       <str name="wt">json</str>
       <str name="indent">true</str>
       <str name="df">text</str>
     </lst>
  </requestHandler>



  <!--
    The export request handler is used to export full sorted result sets.
    Do not change these defaults.
  -->

  <requestHandler name="/export" class="solr.SearchHandler">
    <lst name="invariants">
      <str name="rq">{!xport}</str>
      <str name="wt">xsort</str>
      <str name="distrib">false</str>
    </lst>

    <arr name="components">
      <str>query</str>
    </arr>
  </requestHandler>


  <!--
  Distributed Stream processing.
  -->

  <requestHandler name="/stream" class="solr.StreamHandler">
    <lst name="invariants">
      <str name="wt">json</str>
      <str name="distrib">false</str>
    </lst>
  </requestHandler>




  <requestHandler name="/update" class="solr.UpdateRequestHandler">
  </requestHandler>
  <initParams path="/update/**,/query,/select,/tvrh,/elevate,/spell,/browse">
    <lst name="defaults">
      <str name="df">text</str>
    </lst>
  </initParams>

  <initParams path="/update/json/docs">
    <lst name="defaults">
      <!--this ensures that the entire json doc will be stored verbatim into one field-->
      <str name="srcField">_src_</str>
      <!--This means a the uniqueKeyField will be extracted from the fields and
       all fields go into the 'df' field. In this config df is already configured to be 'text'
        -->
      <str name="mapUniqueKeyOnly">true</str>
    </lst>

  </initParams>

  <requestHandler name="/update/json" class="solr.UpdateRequestHandler">
        <lst name="defaults">
         <str name="stream.contentType">application/json</str>
       </lst>
  </requestHandler>
  <requestHandler name="/update/csv" class="solr.UpdateRequestHandler">
        <lst name="defaults">
         <str name="stream.contentType">application/csv</str>
       </lst>
  </requestHandler>

  <requestHandler name="/update/extract"
                  startup="lazy"
                  class="solr.extraction.ExtractingRequestHandler" >
    <lst name="defaults">
      <str name="lowernames">true</str>
      <str name="uprefix">ignored_</str>

      <!-- capture link hrefs but ignore div attributes -->
      <str name="captureAttr">true</str>
      <str name="fmap.a">links</str>
      <str name="fmap.div">ignored_</str>
    </lst>
  </requestHandler>


  <requestHandler name="/analysis/field"
                  startup="lazy"
                  class="solr.FieldAnalysisRequestHandler" />


  <requestHandler name="/analysis/document"
                  class="solr.DocumentAnalysisRequestHandler" 
                  startup="lazy" />


  <!--

  GH: was machen wir mit den nachfolgenden Handlern?
  bauchen wir diese?

  -->


  <!-- This single handler is equivalent to the following... -->
  <!--
     <requestHandler name="/admin/luke"       class="solr.admin.LukeRequestHandler" />
     <requestHandler name="/admin/system"     class="solr.admin.SystemInfoHandler" />
     <requestHandler name="/admin/plugins"    class="solr.admin.PluginInfoHandler" />
     <requestHandler name="/admin/threads"    class="solr.admin.ThreadDumpHandler" />
     <requestHandler name="/admin/properties" class="solr.admin.PropertiesRequestHandler" />
     <requestHandler name="/admin/file"       class="solr.admin.ShowFileRequestHandler" >
    -->
  <!-- If you wish to hide files under ${solr.home}/conf, explicitly
       register the ShowFileRequestHandler using the definition below. 
       NOTE: The glob pattern ('*') is the only pattern supported at present, *.xml will
             not exclude all files ending in '.xml'. Use it to exclude _all_ updates
    -->
  <!--
     <requestHandler name="/admin/file" 
                     class="solr.admin.ShowFileRequestHandler" >
       <lst name="invariants">
         <str name="hidden">synonyms.txt</str> 
         <str name="hidden">anotherfile.txt</str> 
         <str name="hidden">*</str> 
       </lst>
     </requestHandler>
    -->
  <!--
    Enabling this request handler (which is NOT a default part of the admin handler) will allow the Solr UI to edit
    all the config files. This is intended for secure/development use ONLY! Leaving available and publically
    accessible is a security vulnerability and should be done with extreme caution!
  -->
  <!--
  <requestHandler name="/admin/fileedit" class="solr.admin.EditFileRequestHandler" >
    <lst name="invariants">
         <str name="hidden">synonyms.txt</str>
         <str name="hidden">anotherfile.txt</str>
    </lst>
  </requestHandler>
  -->

  <!-- Echo the request contents back to the client -->
  <requestHandler name="/debug/dump" class="solr.DumpRequestHandler" >
    <lst name="defaults">
     <str name="echoParams">explicit</str> 
     <str name="echoHandler">true</str>
    </lst>
  </requestHandler>


    <!-- Solr Replication for master -->

    <requestHandler name="/replication" class="solr.ReplicationHandler" >
        <lst name="master">
            <str name="replicateAfter">commit</str>
            <str name="replicateAfter">optimize</str>
            <str name="replicateAfter">startup</str>
        </lst>
    </requestHandler>




  <searchComponent name="spellcheck" class="solr.SpellCheckComponent">

      <!-- weitere Möglichkeiten für Spellchecker in 5.2 evaluieren und testen -->

      <lst name="spellchecker">
          <str name="name">default</str>
          <str name="field">title</str>
          <str name="classname">solr.DirectSolrSpellChecker</str>
          <str name="distanceMeasure">internal</str>
          <float name="accuracy">0.5</float>
          <int name="maxEdits">2</int>
          <int name="minPrefix">1</int>
          <int name="maxInspections">8</int>
          <int name="minQueryLength">3</int>
          <float name="maxQueryFrequency">0.01</float>
          <str name="combineWords">true</str>

      </lst>


      <lst name="spellchecker">
          <str name="name">basicSpell</str>
          <str name="field">author</str>
          <str name="classname">solr.DirectSolrSpellChecker</str>
          <str name="distanceMeasure">internal</str>
          <float name="accuracy">0.5</float>
          <int name="maxEdits">2</int>
          <int name="minPrefix">1</int>
          <int name="maxInspections">5</int>
          <int name="minQueryLength">3</int>
          <float name="maxQueryFrequency">0.01</float>
          <str name="combineWords">true</str>
      </lst>

  </searchComponent>
  

  <searchComponent name="suggest" class="solr.SuggestComponent">
    <lst name="suggester">
      <str name="name">mySuggester</str>
      <str name="lookupImpl">FuzzyLookupFactory</str>      
      <str name="dictionaryImpl">DocumentDictionaryFactory</str>
      <str name="field">cat</str>
      <str name="weightField">price</str>
      <str name="suggestAnalyzerFieldType">string</str>
      <str name="buildOnStartup">false</str>
    </lst>
  </searchComponent>



  <searchComponent name="tvComponent" class="solr.TermVectorComponent"/>


  <searchComponent name="clustering"
                   enable="${solr.clustering.enabled:false}"
                   class="solr.clustering.ClusteringComponent" >
    <lst name="engine">
      <str name="name">lingo</str>

      <str name="carrot.algorithm">org.carrot2.clustering.lingo.LingoClusteringAlgorithm</str>

      <str name="carrot.resourcesDir">clustering/carrot2</str>
    </lst>

    <!-- An example definition for the STC clustering algorithm. -->
    <lst name="engine">
      <str name="name">stc</str>
      <str name="carrot.algorithm">org.carrot2.clustering.stc.STCClusteringAlgorithm</str>
    </lst>

    <!-- An example definition for the bisecting kmeans clustering algorithm. -->
    <lst name="engine">
      <str name="name">kmeans</str>
      <str name="carrot.algorithm">org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm</str>
    </lst>
  </searchComponent>


  <searchComponent name="terms" class="solr.TermsComponent"/>

  <searchComponent name="elevator" class="solr.QueryElevationComponent" >
    <!-- pick a fieldType to analyze queries -->
    <str name="queryFieldType">string</str>
    <str name="config-file">elevate.xml</str>
  </searchComponent>

  <searchComponent class="solr.HighlightComponent" name="highlight">
      <highlighting>
          <!-- Configure the standard fragmenter -->
          <!-- This could most likely be commented out in the "default" case -->
          <fragmenter name="gap"
                      default="true"
                      class="solr.highlight.GapFragmenter">
              <lst name="defaults">
                  <int name="hl.fragsize">100</int>
              </lst>
          </fragmenter>

          <!-- A regular-expression-based fragmenter
               (for sentence extraction)
            -->
          <fragmenter name="regex"
                      class="solr.highlight.RegexFragmenter">
              <lst name="defaults">
                  <!-- slightly smaller fragsizes work better because of slop -->
                  <int name="hl.fragsize">70</int>
                  <!-- allow 50% slop on fragment sizes -->
                  <float name="hl.regex.slop">0.5</float>
                  <!-- a basic sentence pattern -->
                  <str name="hl.regex.pattern">[-\w ,/\n\&quot;&apos;]{20,200}</str>
              </lst>
          </fragmenter>

          <!-- Configure the standard formatter -->
          <formatter name="html"
                     default="true"
                     class="solr.highlight.HtmlFormatter">
              <lst name="defaults">
                  <str name="hl.simple.pre"><![CDATA[<em>]]></str>
                  <str name="hl.simple.post"><![CDATA[</em>]]></str>
              </lst>
          </formatter>

          <!-- Configure the standard encoder -->
          <encoder name="html"
                   class="solr.highlight.HtmlEncoder" />

          <!-- Configure the standard fragListBuilder -->
          <fragListBuilder name="simple"
                           class="solr.highlight.SimpleFragListBuilder"/>

          <!-- Configure the single fragListBuilder -->
          <fragListBuilder name="single"
                           class="solr.highlight.SingleFragListBuilder"/>

          <!-- Configure the weighted fragListBuilder -->
          <fragListBuilder name="weighted"
                           default="true"
                           class="solr.highlight.WeightedFragListBuilder"/>

          <!-- default tag FragmentsBuilder -->
          <fragmentsBuilder name="default"
                            default="true"
                            class="solr.highlight.ScoreOrderFragmentsBuilder">
              <!--
              <lst name="defaults">
                <str name="hl.multiValuedSeparatorChar">/</str>
              </lst>
              -->
          </fragmentsBuilder>

          <!-- multi-colored tag FragmentsBuilder -->
          <fragmentsBuilder name="colored"
                            class="solr.highlight.ScoreOrderFragmentsBuilder">
              <lst name="defaults">
                  <str name="hl.tag.pre"><![CDATA[
               <b style="background:yellow">,<b style="background:lawgreen">,
               <b style="background:aquamarine">,<b style="background:magenta">,
               <b style="background:palegreen">,<b style="background:coral">,
               <b style="background:wheat">,<b style="background:khaki">,
               <b style="background:lime">,<b style="background:deepskyblue">]]></str>
                  <str name="hl.tag.post"><![CDATA[</b>]]></str>
              </lst>
          </fragmentsBuilder>

          <boundaryScanner name="default"
                           default="true"
                           class="solr.highlight.SimpleBoundaryScanner">
              <lst name="defaults">
                  <str name="hl.bs.maxScan">10</str>
                  <str name="hl.bs.chars">.,!? &#9;&#10;&#13;</str>
              </lst>
          </boundaryScanner>

          <boundaryScanner name="breakIterator"
                           class="solr.highlight.BreakIteratorBoundaryScanner">
              <lst name="defaults">
                  <!-- type should be one of CHARACTER, WORD(default), LINE and SENTENCE -->
                  <str name="hl.bs.type">WORD</str>
                  <!-- language and country are used when constructing Locale object.  -->
                  <!-- And the Locale object will be used when getting instance of BreakIterator -->
                  <str name="hl.bs.language">en</str>
                  <str name="hl.bs.country">US</str>
              </lst>
          </boundaryScanner>
      </highlighting>
  </searchComponent>


  <queryResponseWriter name="json" class="solr.JSONResponseWriter">
     <!-- For the purposes of the tutorial, JSON responses are written as
      plain text so that they are easy to read in *any* browser.
      If you expect a MIME type of "application/json" just remove this override.
     -->
    <str name="content-type">text/plain; charset=UTF-8</str>
  </queryResponseWriter>
  
  <!--
     Custom response writers can be declared as needed...
    -->
    <queryResponseWriter name="velocity" class="solr.VelocityResponseWriter" startup="lazy">
      <str name="template.base.dir">${velocity.template.base.dir:}</str>
    </queryResponseWriter>
  

  <!-- XSLT response writer transforms the XML output by any xslt file found
       in Solr's conf/xslt directory.  Changes to xslt files are checked for
       every xsltCacheLifetimeSeconds.  
    -->
  <queryResponseWriter name="xslt" class="solr.XSLTResponseWriter">
    <int name="xsltCacheLifetimeSeconds">5</int>
  </queryResponseWriter>



  <!-- Legacy config for the admin interface -->
  <admin>
    <defaultQuery>*:*</defaultQuery>
  </admin>

</config>
